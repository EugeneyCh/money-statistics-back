{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Spendy app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Spendy app"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://money-statistics-back-1.onrender.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Transactions",
      "description": "Operations with transactions."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register user",
        "operationId": "getUser",
        "description": "Create a user with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "john@example.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "Password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a student",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "login a user with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "John Doe",
                    "maxLength": 64
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "Password123",
                    "minLength": 8,
                    "maxLength": 64
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session",
        "operationId": "refreshSession",
        "description": "Refresh user session using cookies: sessionId and refreshToken",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed the session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the user by clearing cookies and removing session",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out, no content returned"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get categories by type",
        "operationId": "getCategories",
        "description": "Retrieve user categories filtered by type (income or expense)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "expense"
              ]
            },
            "description": "Category type to filter by (must be \"income\" or \"expense\")"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "income categories fetched"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/categories"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/transactions/summary": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get transaction summary by period",
        "operationId": "getTransactionSummary",
        "description": "Retrieve a summary of transactions (total and by category) for a specific period.   The period must be in format YYYY-MM.   Requires authentication.   Optional body filter can include `sum`, `category`, `transactionType`, or `date`.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}$"
            },
            "description": "Period in format YYYY-MM. Example: `2025-05`\n"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sum": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1000000
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertainment"
                    ]
                  },
                  "transactionType": {
                    "type": "string",
                    "enum": [
                      "income",
                      "expense"
                    ]
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction summary successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/transactions/create": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a new transaction",
        "operationId": "createTransaction",
        "description": "Create a new income or expense transaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/transactions/update/{id}": {
      "put": {
        "summary": "Update a transaction",
        "operationId": "updateTransaction",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Transaction ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "66504f7123abf9475f6b1123"
                    },
                    "__v": {
                      "type": "integer",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/transactions/delete/{id}": {
      "delete": {
        "summary": "Delete a transaction",
        "operationId": "deleteTransaction",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Transaction ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Transaction deleted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get current user information",
        "operationId": "getCurrentUser",
        "tags": [
          "User"
        ],
        "description": "Returns the authenticated user's profile details.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 6650457a4e3fa639236d2461!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "6650457a4e3fa639236d2461"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "balance": {
                          "type": "number",
                          "example": 1250.5
                        },
                        "avatar": {
                          "type": "string",
                          "example": "https://example.com/avatar.jpg"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user",
        "operationId": "updateUser",
        "tags": [
          "User"
        ],
        "description": "Updates the current authenticated user's name and/or email.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 32,
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                    "example": "user@example.com"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "6650457a4e3fa639236d2461"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "balance": {
                          "type": "number",
                          "example": 1200
                        },
                        "avatar": {
                          "type": "string",
                          "example": "https://example.com/avatar.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/avatar": {
      "patch": {
        "summary": "Update user avatar",
        "operationId": "updateUserAvatar",
        "tags": [
          "User"
        ],
        "description": "Uploads and updates the user's avatar image. Accepts multipart/form-data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 32,
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                    "example": "user@example.com"
                  }
                },
                "required": [
                  "avatar"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User avatar successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated avatar of the user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "6650457a4e3fa639236d2461"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "balance": {
                          "type": "number",
                          "example": 1200
                        },
                        "avatar": {
                          "type": "string",
                          "example": "https://res.cloudinary.com/demo/image/upload/avatar.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "refreshToken"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 32,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 64,
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64,
            "description": "Password must contain at least one uppercase letter, one lowercase letter, and one digit.",
            "example": "Password123"
          }
        }
      },
      "categories": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "type",
          "userId"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "664b1d8f4e8238a7b7f91d22"
          },
          "name": {
            "description": "Name.",
            "type": "string",
            "example": "John Doe"
          },
          "type": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "description": "Must choose income or expenses."
          },
          "userId": {
            "type": "string",
            "example": "664a9d2f77e9a8d2b5a2c8f4"
          }
        }
      },
      "transaction": {
        "type": "object",
        "required": [
          "period",
          "stats"
        ],
        "properties": {
          "period": {
            "type": "string",
            "example": "2025-05"
          },
          "stats": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type",
                "categories",
                "total"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "income",
                    "expense"
                  ],
                  "example": "income"
                },
                "total": {
                  "type": "number",
                  "example": 540.5
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "category",
                      "total"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "example": "Products"
                      },
                      "total": {
                        "type": "number",
                        "example": 120.75
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "transactionCreate": {
        "type": "object",
        "required": [
          "userId",
          "type",
          "category",
          "sum",
          "date",
          "comment"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "example": "663a4f21c3c98a76c51d81d7"
          },
          "type": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "example": "income"
          },
          "category": {
            "type": "string",
            "minLength": 3,
            "maxLength": 30,
            "enum": [
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertainment"
            ],
            "example": "Products"
          },
          "sum": {
            "type": "number",
            "minimum": 0,
            "maximum": 1000000,
            "example": 200
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2025-05-21"
          },
          "comment": {
            "type": "string",
            "example": "Bought groceries"
          }
        }
      },
      "transactionResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "66504f7123abf9475f6b1123"
          },
          "userId": {
            "type": "string",
            "example": "663a4f21c3c98a76c51d81d7"
          },
          "type": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "example": "expense"
          },
          "category": {
            "type": "string",
            "example": "Car"
          },
          "sum": {
            "type": "number",
            "example": 150
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-21T00:00:00.000Z"
          },
          "comment": {
            "type": "string",
            "example": "Oil change"
          },
          "__v": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "transactionUpdate": {
        "type": "object",
        "properties": {
          "sum": {
            "type": "number",
            "minimum": 0,
            "maximum": 1000000,
            "example": 150
          },
          "category": {
            "type": "string",
            "enum": [
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertainment"
            ],
            "example": "Education"
          },
          "transactionType": {
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "example": "expense"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2025-05-20"
          },
          "comment": {
            "type": "string",
            "example": "Updated comment"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequest"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid period format. Expected YYYY-MM."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "NotFoundError",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Route not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
